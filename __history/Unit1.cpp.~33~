//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Unit1.h"
#include "Unit2.h"
#include "Unit3.h"
#include <fstream>
#include <string>
#include <vector>
#include <sstream>
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TFLogin *FLogin;
//---------------------------------------------------------------------------


__fastcall TFLogin::TFLogin(TComponent* Owner)
: TForm(Owner)
{
}
std::vector<std::string> parsePodaci(std::string line) {
		 std::vector<std::string> rezultat;
		 std::stringstream s_stream(line);

	while (s_stream.good()) {
			std::string substr;
			getline(s_stream, substr, ',');
			rezultat.push_back(substr);

		}
		return rezultat;
}


//---------------------------------------------------------------------------
void __fastcall TFLogin::ButtonLoginClick(TObject *Sender)
{
//check username & pass
// if username & pass are correct
	fstream myFile;
	myFile.open("korisnici.txt", ios::in);
	if (myFile.is_open()) {
		std::string line;
		while (getline(myFile, line)) {
			std::vector<std::string> parsedLine = parsePodaci(line);
			const char* username = parsedLine.at(0).c_str();
			AnsiString eUsername = EditUsername->Text;
			const char* usernameString = eUsername.c_str();
			if (std::strcmp(usernameString, username)) {
				const char* password = parsedLine.at(1).c_str();
				AnsiString ePassword = EditPassword->Text;
				const char* passwordString = ePassword.c_str();
				if (std::strcmp(passwordString, password)==0) {
				Label1->Caption = "asdasdsa";
				ModalResult = mrOk;

				}

			}

		}
	}
}
//---------------------------------------------------------------------------


void __fastcall TFLogin::ButtonRegisterClick(TObject *Sender)
{

	std::unique_ptr<TFRegister> FRegister(new TFRegister(NULL));
    FRegister->ShowModal();


}
//---------------------------------------------------------------------------

